{"version":3,"sources":["components/Header.js","components/ImageCard.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","Jumbotron","fluid","className","Container","topScore","score","ImageCard","src","image","onClick","handleClick","id","Gamecard","state","data","handleItemClick","guessed","updatedData","map","item","newItem","clicked","correctGuessFunction","incorrectGuessFunction","console","log","newscore","newTopScore","Math","max","setState","shuffleIt","shuffleCards","dataToShuff","counter","length","randomIndex","floor","random","temp","resetDataFuntion","resetData","dataa","this","key","Component","App","cardimage","trackClick","Game","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAqBeA,MAlBf,SAAgBC,GAEZ,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,cACvB,kBAACC,EAAA,EAAD,KACI,2CACA,8CAAoBJ,EAAMK,UAC1B,kDAAwBL,EAAMM,OAC9B,0G,aCCDC,MATf,SAAmBP,GACf,OACI,yBACIQ,IAAKR,EAAMS,MACXC,QAAS,kBAAMV,EAAMW,YAAYX,EAAMY,KACvCT,UAAU,eCoGPU,E,2MArGXC,MAAQ,CACJC,OACAT,MAAO,EACPD,SAAU,G,EAEdW,gBAAkB,SAAAJ,GACd,IAAIK,GAAU,EACVC,EAAc,EAAKJ,MAAMC,KAAKI,KAAI,SAAAC,GAElC,IAAMC,EAAO,eAAQD,GAOrB,OANIC,EAAQT,KAAOA,GACQ,GAAnBS,EAAQC,UACRD,EAAQC,SAAU,EAClBL,GAAU,GAGXI,KAEXJ,EAAU,EAAKM,qBAAqBL,GAAe,EAAKM,uBAAuBN,I,EAGnFK,qBAAuB,SAAAR,GACnBU,QAAQC,IAAI,gCACZ,IAAMC,EAAW,EAAKb,MAAMR,MAAQ,EAC9BsB,EAAcC,KAAKC,IAAIH,EAAU,EAAKb,MAAMT,UAElD,EAAK0B,SAAS,CACVzB,MAAOqB,EACPtB,SAAUuB,EACVb,KAAM,EAAKiB,UAAUjB,M,EAI7BkB,aAAe,WACXR,QAAQC,IAAI,oBACZ,IAAMQ,EAAc,EAAKF,UAAU,EAAKlB,MAAMC,MAC9CU,QAAQC,IAAIQ,GACZ,EAAKH,SAAS,CAAEG,iB,EAGpBF,UAAY,SAAAjB,GAGR,IAFA,IAAIoB,EAAUpB,EAAKqB,OAEZ,IAAMD,GAAS,CAClB,IAAIE,EAAcR,KAAKS,MAAMT,KAAKU,SAAWJ,GAGzCK,EAAOzB,EAFXoB,GAAoB,GAGpBpB,EAAKoB,GAAWpB,EAAKsB,GACrBtB,EAAKsB,GAAeG,EAExB,OAAOzB,G,EAKX0B,iBAAmB,SAAA1B,GACfU,QAAQC,IAAI,uBACZ,IAAMgB,EAAY3B,EAAKI,KAAI,SAAAC,GAAI,sBAAUA,EAAV,CAAgBE,SAAS,OAIxD,OAAO,EAAKU,UAAUU,I,EAG1BlB,uBAAyB,SAAAmB,GACrBlB,QAAQC,IAAI,qBAGZ,EAAKK,SAAS,CACVzB,MAFa,EAGbS,KAAM,EAAK0B,iBAAiBE,M,wEAQ1B,IAAD,OAEL,OADAlB,QAAQC,IAAIkB,KAAK9B,MAAMC,MAEnB,6BACI,kBAAC,EAAD,CAAQT,MAAOsC,KAAK9B,MAAMR,MAAOD,SAAUuC,KAAK9B,MAAMT,WACtD,6BACKuC,KAAK9B,MAAMC,KAAKI,KAAI,SAAAC,GAAI,OACrB,kBAAC,EAAD,CACIR,GAAIQ,EAAKR,GACTiC,IAAKzB,EAAKR,GACVH,MAAOW,EAAKX,MACZE,YAAa,EAAKK,2B,GA5FvB8B,aC6BRC,G,iNAvBbjC,MAAQ,CACNkC,a,EAGFC,WAAa,SAAArC,K,wEAOX,OACE,yBAAKT,UAAU,OAEb,kBAAC+C,EAAD,W,GAfUJ,cCEEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.00660771.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Jumbotron, Container } from 'react-bootstrap';\r\n\r\nfunction Header(props) {\r\n\r\n    return (\r\n        <Jumbotron fluid className=\"background\">\r\n            <Container>\r\n                <h1>Clicky Game</h1>\r\n                <p>Your Top Score: {props.topScore}</p>\r\n                <p>Your Current Score: {props.score}</p>\r\n                <p>\r\n                    Click on an image to earn points, but don't click on any more than once!\r\n                </p>\r\n\r\n            </Container>\r\n        </Jumbotron>\r\n\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport \"./styles/ImageCardStyles.css\"\r\n\r\nfunction ImageCard(props) {\r\n    return (\r\n        <img\r\n            src={props.image}\r\n            onClick={() => props.handleClick(props.id)}\r\n            className=\"imageCard\"\r\n        />\r\n    )\r\n}\r\nexport default ImageCard;","import React, { Component } from 'react';\r\nimport Header from \"./Header\";\r\nimport data from './cardimage.json';\r\nimport ImageCard from './ImageCard'\r\n\r\nclass Gamecard extends Component {\r\n\r\n    state = {\r\n        data,\r\n        score: 0,\r\n        topScore: 0\r\n    }\r\n    handleItemClick = id => {\r\n        let guessed = false;\r\n        var updatedData = this.state.data.map(item => {\r\n            //newItem is creating a copy of a single object as it is iterating and then doing validation (spread operator)\r\n            const newItem = { ...item };\r\n            if (newItem.id === id) {\r\n                if (newItem.clicked == false) {\r\n                    newItem.clicked = true;\r\n                    guessed = true\r\n                }\r\n            }\r\n            return newItem\r\n        })\r\n        guessed ? this.correctGuessFunction(updatedData) : this.incorrectGuessFunction(updatedData)\r\n    }\r\n\r\n    correctGuessFunction = data => {\r\n        console.log(\"CorrectGuessFunction working\");\r\n        const newscore = this.state.score + 1;\r\n        const newTopScore = Math.max(newscore, this.state.topScore);\r\n\r\n        this.setState({\r\n            score: newscore,\r\n            topScore: newTopScore,\r\n            data: this.shuffleIt(data)\r\n        })\r\n\r\n    }\r\n    shuffleCards = () => {\r\n        console.log(\"shuffle function\");\r\n        const dataToShuff = this.shuffleIt(this.state.data);\r\n        console.log(dataToShuff);\r\n        this.setState({ dataToShuff });\r\n    }\r\n\r\n    shuffleIt = data => {\r\n        var counter = data.length;\r\n\r\n        while (0 !== counter) {\r\n            let randomIndex = Math.floor(Math.random() * counter);\r\n            counter = counter - 1;\r\n\r\n            let temp = data[counter];\r\n            data[counter] = data[randomIndex];\r\n            data[randomIndex] = temp;\r\n        }\r\n        return data;\r\n\r\n    }\r\n\r\n\r\n    resetDataFuntion = data => {\r\n        console.log(\"reset data function\");\r\n        const resetData = data.map(item => ({ ...item, clicked: false }));\r\n        // item.clicked = false; \r\n        // return item;\r\n        // return resetData;\r\n        return this.shuffleIt(resetData);\r\n    }\r\n\r\n    incorrectGuessFunction = dataa => {\r\n        console.log(\"Incorrect working\");\r\n\r\n        const newscore = 0;\r\n        this.setState({\r\n            score: newscore,\r\n            data: this.resetDataFuntion(dataa)\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    //render is a lifecycle event \r\n    render() {\r\n        console.log(this.state.data)\r\n        return (\r\n            <div>\r\n                <Header score={this.state.score} topScore={this.state.topScore} />\r\n                <div>\r\n                    {this.state.data.map(item => (\r\n                        <ImageCard\r\n                            id={item.id}\r\n                            key={item.id}\r\n                            image={item.image}\r\n                            handleClick={this.handleItemClick}\r\n                        />\r\n\r\n                    ))}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Gamecard;\r\n","import React, { Component } from 'react';\nimport Gamecard from \"./components/Game.js\";\nimport cardimage from \"./components/cardimage.json\";\nimport './App.css';\n\n//functionality vs components\n//update APP.js to a class component \n//control the state here \n\n\nclass App extends Component {\n  state = {\n    cardimage\n  };\n\n  trackClick = id => {\n    // store the id of the image click push it into an array\n    //have a checker funciton for the array for the next click \n\n  }\n  //render is a lifecycle event \n  render() {\n    return (\n      <div className=\"App\">\n\n        <Gamecard />\n\n      </div>\n\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}